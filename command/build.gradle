plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'com.gradleup.shadow' version '8.3.6'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

dependencies {
    implementation project(':donkey')
    implementation project(':server')

    // Reflections
    implementation 'org.reflections:reflections:0.9.10'
}

// Configure the standard JAR task to build the library part (mirth-cli.jar)
tasks.named('jar', Jar) {
    archiveBaseName = 'mirth-cli' // Match Ant artifact name
    archiveClassifier = null      // No classifier for the library JAR
    archiveVersion = ''
    destinationDirectory = layout.buildDirectory.dir('libs-temp') // Output to temp dir

    from(sourceSets.main.output) {
        // Exclude the launcher classes
        exclude 'com/mirth/connect/cli/launcher/**'
    }
}

// Create a custom task for the launcher JAR (mirth-cli-launcher.jar)
tasks.named('shadowJar', ShadowJar) {
    dependsOn processResources, classes // Depend on compiled classes
    archiveBaseName = 'mirth-cli-launcher'
    archiveClassifier = ''
    archiveVersion = ''

    from(sourceSets.main.output) {
        // Include *only* the launcher classes
        include 'com/mirth/connect/cli/launcher/**'
    }
    manifest {
        attributes(
            'Main-Class': 'com.mirth.connect.cli.launcher.CommandLineLauncher'
            // No Class-Path needed - application plugin handles runtime classpath
        )
    }
}

tasks.register('launcherJar', Jar) {
    dependsOn processResources, classes // Depend on compiled classes
    archiveBaseName = 'mirth-cli-launcher'
    archiveClassifier = ''
    archiveVersion = ''
    destinationDirectory = layout.buildDirectory.dir('libs-temp') // Output to temp dir

    from(sourceSets.main.output) {
        // Include *only* the launcher classes
        include 'com/mirth/connect/cli/launcher/**'
    }
    manifest {
        attributes(
                'Main-Class': 'com.mirth.connect.cli.launcher.CommandLineLauncher'
                // No Class-Path needed - application plugin handles runtime classpath
        )
    }
}

application {
    mainClass = 'com.mirth.connect.cli.launcher.CommandLineLauncher'
}

// Configure the distribution
distributions {
    main { // The default distribution created by the application plugin
        distributionBaseName = 'mirth-cli' // Name of the zip/tar file
        contents {
            // Copy the library JAR into the distribution's lib folder
            into('lib') { // Changed from 'cli-lib' to standard 'lib'
                from(jar) // Add the main library JAR task output
                // Dependencies are automatically included here by the plugin
            }
            // Copy the launcher JAR into the distribution's lib folder
            into('lib') {
                 from(launcherJar) // Add the launcher JAR task output
            }
            // Copy configuration files into the distribution's conf folder
            into('conf') {
                from(sourceSets.main.resources) {
                   include '*.properties' // Include properties files from resources
                }
            }
            // Copy startup scripts (generated by application plugin)
            // into('bin') { // Default location
            // }
        }
    }
}

// Ensure the custom JARs are built before the distribution is assembled
tasks.distTar.dependsOn(jar, launcherJar)
tasks.distZip.dependsOn(jar, launcherJar)

// Build depends on distribution assembly
tasks.build.dependsOn(tasks.distTar, tasks.distZip)

// Testing configuration (inherited from root)
tasks.named('test', Test) {
   // Add specific test config for command/cli if needed
}