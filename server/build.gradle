plugins {
    id 'java-library' // Start with this, can add 'application' later if needed for distribution
    // Add 'maven-publish' later if publishing artifacts like client-core/crypto to a repo
}

// Group and Version likely inherited from root project

// Configure source sets assuming standard layout refactor is done
// (src/main/java, src/main/resources, etc.)
// If refactor is not done, add a sourceSets block similar to previous modules.
sourceSets {
    main {
        resources {
            // Include all resource types needed by the server
            srcDirs = [
                'conf',                    // Mirth conf
                'dbconf',                  // Database scripts/maps
                'public_html',             // Web UI content
                'public_api_html',         // Swagger UI content
                'docs'                     // Other docs included in resources
            ]
            // Exclude specific files if necessary (e.g., javadoc sources if 'docs' contains them)
            exclude '**/javadocs/**'
        }
    }
}

// --- Custom Configurations for Consumable Artifacts ---
configurations {
    // Configuration for mirth-client-core.jar
    clientCoreElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
            // Add other attributes if needed, e.g., capability
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'client-core-classes'))
        }
    }
    // Configuration for mirth-crypto.jar
    cryptoElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'crypto-classes'))
        }
    }
    // Configuration for mirth-dbconf.jar (optional, might be simpler to include in main JAR/dist)
    dbconfElements {
        canBeConsumed = true
        canBeResolved = false
        attributes {
             // Usually runtime as it contains resources
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
    }
}


dependencies {
    // --- Project Dependencies ---
    // Assuming donkey produces 'donkey-model' and 'donkey-server' classifiers
    // Adjust if donkey just produces one JAR containing everything needed
    implementation project(':donkey')
    // Or specifically: implementation project(path: ':donkey') // relies on java-library publications

    implementation project(':generator') // Depends on mirth-vocab.jar

    // --- External Dependencies (Mapped from server/lib) ---

    implementation 'software.amazon.awssdk:aws-core:2.15.28'
    implementation 'software.amazon.awssdk:aws-json-protocol:2.15.28'
    implementation 'software.amazon.awssdk:aws-query-protocol:2.15.28'
    implementation 'software.amazon.awssdk:aws-xml-protocol:2.15.28'
    implementation 'software.amazon.awssdk:s3:2.15.28'
    implementation 'software.amazon.awssdk:sts:2.15.28'
    implementation 'software.amazon.awssdk:apache-client:2.15.28'

    // Bouncy Castle (Crypto)
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1' // Use appropriate JDK version suffix
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcutil-jdk18on:1.78.1'

    // Guice (Dependency Injection)
    implementation 'com.google.inject:guice:4.1.0' // Old

    // HAPI (HL7 Parser)
    implementation 'ca.uhn.hapi:hapi-base:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v21:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v22:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v23:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v231:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v24:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v25:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v251:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v26:2.3'
    implementation 'ca.uhn.hapi:hapi-structures-v27:2.3'
    // implementation 'ca.uhn.hapi:hapi-structures-v28:2.3' // Check if v2.8 structure jars exist at 2.3 base
    // implementation 'ca.uhn.hapi:hapi-structures-v281:2.3'

    // HikariCP (DB Pooling)
    implementation 'com.zaxxer:HikariCP:2.5.1' // Very old

    // Jackson (JSON processing)
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.14.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.3'

    // Javassist (Bytecode manipulation)
    implementation 'org.javassist:javassist:3.26.0-GA'

    // Javax / Jakarta APIs (use compileOnly for standard APIs provided by container/JDK)
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0' // Provided by Jetty
    compileOnly 'javax.websocket:javax.websocket-api:1.1' // If using websockets, check if Jetty provides impl
    compileOnly 'javax.mail:javax.mail-api:1.5.0' // Use API jar, impl provided by Angus Mail likely
    implementation 'com.sun.mail:javax.mail:1.5.0' // Actual implementation if needed directly
    compileOnly 'javax.activation:javax.activation-api:1.2.0' // Standard API
    implementation 'com.sun.activation:javax.activation:1.2.0' // Implementation if needed
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2' // Standard API
    compileOnly 'javax.inject:javax.inject:1' // Standard API, Guice provides impl
    compileOnly 'javax.json:javax.json-api:1.0' // Standard API
    implementation 'org.glassfish:javax.json:1.0.4' // Implementation
    compileOnly 'javax.ws.rs:javax.ws.rs-api:2.0.1' // Standard API, Jersey provides impl
    // JAXB APIs (compileOnly if using JDK 9+ and relying on JDK modules)
    // implementation might be needed for JDK 8 or explicit usage
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3' // Use Jakarta namespace version
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'     // Implementation
    // JAX-WS APIs (compileOnly if relying on JDK, implementation otherwise)
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:2.3.3' // Use Jakarta namespace version
    implementation 'com.sun.xml.ws:jaxws-rt:2.3.3'           // Implementation
    // SOAP API
    compileOnly 'javax.xml.soap:javax.xml.soap-api:1.4.0' // Often provided by JAX-WS runtime

    // JDOM2 (XML processing)
    implementation 'org.jdom:jdom2:2.0.6.1' // Check version

    // Jersey (JAX-RS Implementation)
    implementation 'org.glassfish.jersey.core:jersey-server:2.22.1'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.22.1'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.22.1'
    implementation 'org.glassfish.jersey.core:jersey-client:2.22.1'
    implementation 'org.glassfish.jersey.media:jersey-media-jaxb:2.22.1'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.22.1'

    // Jetty (Servlet Container)
    implementation 'org.eclipse.jetty:jetty-server:9.4.53.v20231009'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.53.v20231009'
    implementation 'org.eclipse.jetty:jetty-webapp:9.4.53.v20231009'
    implementation 'org.eclipse.jetty:jetty-plus:9.4.53.v20231009' // For JNDI
    implementation 'org.eclipse.jetty:jetty-annotations:9.4.53.v20231009'
    implementation 'org.eclipse.jetty:jetty-rewrite:9.4.53.v20231009'
    // JSP dependencies (if supporting JSP pages within Mirth?)
    // implementation 'org.eclipse.jetty:jetty-jsp:9.4.53.v20231009' // Check if this exists/is needed
    // implementation 'org.eclipse.jetty:apache-jsp:9.4.53.v20231009'
    // implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:1.2.6' // JSTL Impl

    // JMS API (compileOnly, implementation provided externally)
    compileOnly 'javax.jms:javax.jms-api:2.0.1' // Or Geronimo spec artifact if preferred
    // compileOnly 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'

    // JNA (OS integration)
    implementation 'net.java.dev.jna:jna:4.5.2'
    implementation 'net.java.dev.jna:jna-platform:4.5.2'

    // Joda Time (Date/Time library - consider migrating to java.time)
    implementation 'joda-time:joda-time:2.9.9' // Old

    // JSch (SSH/SFTP)
    implementation 'com.github.mwiede:jsch:0.2.18' // Use a fork, original is stagnant

    // MyBatis (Persistence framework)
    implementation 'org.mybatis:mybatis:3.1.1' // Very old

    // Oshi (OS Hardware/System info)
    implementation 'com.github.oshi:oshi-core:3.9.1' // Old

    // Quartz (Scheduler - already declared by Donkey? Check scope/version)
    implementation 'org.quartz-scheduler:quartz:2.3.2'

    // Staxon (JSON <-> XML)
    implementation 'de.odysseus.staxon:staxon:1.3'

    // Swagger (API Documentation)
    implementation 'io.swagger.core.v3:swagger-core:2.0.10' // Use v3 artifacts
    implementation 'io.swagger.core.v3:swagger-annotations:2.0.10'
    implementation 'io.swagger.core.v3:swagger-models:2.0.10'
    implementation 'io.swagger.core.v3:swagger-integration:2.0.10'
    implementation 'io.swagger.core.v3:swagger-jaxrs2:2.0.10'
    implementation 'io.swagger.core.v3:swagger-jaxrs2-servlet-initializer:2.0.10' // Check artifactId
    implementation 'org.reflections:reflections:0.9.10' // Dependency of Swagger

    // Xerces (XML Parser implementation)
    implementation 'xerces:xercesImpl:2.12.2' // Generally rely on JDK's parser unless specific features needed
    // XML APIs (usually provided by JDK)
    // compileOnly 'xml-apis:xml-apis:1.4.01'

    // XStream (XML Serialization)
    implementation 'com.thoughtworks.xstream:xstream:1.4.20'
    // implementation 'xpp3:xpp3_min:1.1.4c' // Transitive

    // Zip4j
    implementation 'net.lingala.zip4j:zip4j:1.3.3' // Very old version, consider updating

    // ClassGraph (Classpath scanning)
    implementation 'io.github.classgraph:classgraph:4.8.53'

    // DCM4CHE
    implementation 'dcm4che:dcm4che-core:2.0.29'
    implementation 'dcm4che:dcm4che-net:2.0.29'
    implementation 'dcm4che:dcm4che-filecache:2.0.29'
    implementation 'dcm4che.tool:dcm4che-tool-dcmrcv:2.0.29'
    implementation 'dcm4che.tool:dcm4che-tool-dcmsnd:2.0.29'

    implementation 'backport-util-concurrent:backport-util-concurrent:3.1'

    implementation 'net.imagej:ij:1.54p'
    implementation 'org.codelibs:jcifs:2.1.10'
    implementation 'com.lowagie:itext:2.1.7'
    implementation 'com.lowagie:itext-rtf:2.1.7'
    implementation 'wsdl4j:wsdl4j:1.6.2'
    implementation 'org.apache.pdfbox:pdfbox:2.0.24'
    implementation 'org.xhtmlrenderer:flying-saucer-pdf:9.1.20'
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.9'
    implementation 'com.openhtmltopdf:openhtmltopdf-core:1.0.9'
    implementation 'slide:slide-webdavlib:2.1'
    implementation 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'
}


// --- Task Definitions ---

// Task to create mirth-crypto.jar
task cryptoJar(type: Jar) {
    dependsOn processResources, classes // Depends on compiled classes and resources
    archiveBaseName = 'mirth'
    archiveClassifier = 'crypto' // -> mirth-crypto-<version>.jar

    from(sourceSets.main.output) { // Include compiled classes and resources
        include 'com/mirth/commons/encryption/**'
    }
    manifest { /* Add manifest details if needed */ }
}

// Task to create mirth-client-core.jar
task clientCoreJar(type: Jar) {
    dependsOn processResources, classes
    archiveBaseName = 'mirth'
    archiveClassifier = 'client-core' // -> mirth-client-core-<version>.jar

    from(sourceSets.main.output) {
        include 'com/mirth/connect/client/core/**'
        include 'com/mirth/connect/model/**' // Include models shared with client
        include 'com/mirth/connect/userutil/**'
        include 'com/mirth/connect/util/**'
        include 'com/mirth/connect/server/util/ResourceUtil.class'
        include 'com/mirth/connect/server/util/DebuggerUtil.class'
        include 'org/mozilla/**' // Rhino classes bundled? Risky. Better to depend on Rhino JAR.
        include 'org/glassfish/jersey/**' // Jersey classes bundled? Risky. Better to depend on Jersey JARs.
        include 'de/odysseus/staxon/**' // Staxon classes bundled? Risky. Better to depend on Staxon JAR.
        include 'net/lingala/zip4j/unzip/**' // zip4j classes bundled? Risky. Better to depend on zip4j JAR.
        include 'version.properties' // Include generated version info
    }
    manifest { /* Add manifest details if needed */ }
}

// Task to create mirth-dbconf.jar
task dbconfJar(type: Jar) {
    dependsOn processResources // Only needs resources
    archiveBaseName = 'mirth'
    archiveClassifier = 'dbconf' // -> mirth-dbconf-<version>.jar
    from(sourceSets.main.resources) { // Include from processed resources
        include 'dbconf/**'
    }
    manifest { /* Add manifest details if needed */ }
}

// Task to create userutil-sources.jar (example)
task userutilSourcesJar(type: Jar) {
    archiveBaseName = 'mirth' // Or maybe 'userutil'
    archiveClassifier = 'userutil-sources'
    from(sourceSets.main.java) { // Package sources directly
        include 'com/mirth/connect/userutil/**.java'
        include 'com/mirth/connect/server/userutil/**.java'
        exclude '**/package-info.java'
    }
}

// Configure the main 'jar' task for mirth-server.jar
tasks.named('jar', Jar) {
    archiveBaseName = 'mirth-server'
    archiveClassifier = null // No classifier for the main JAR

    // Exclude classes/resources packaged in other specific JARs
    from(sourceSets.main.output) {
        exclude 'com/mirth/commons/encryption/**' // In cryptoJar
        exclude 'com/mirth/connect/client/core/**' // In clientCoreJar
        // Exclude other parts packaged in clientCoreJar if needed
        exclude 'dbconf/**' // In dbconfJar
        // Exclude launcher classes (will be in separate JAR)
        exclude 'com/mirth/connect/server/launcher/**'
        exclude 'com/mirth/connect/server/extprops/**'
        // Exclude bundled libraries (these should be dependencies, not bundled)
        exclude 'org/mozilla/**'
        exclude 'org/glassfish/jersey/**'
        exclude 'de/odysseus/staxon/**'
        exclude 'net/lingala/zip4j/unzip/**'
        // Exclude extension code (will be handled separately)
        exclude 'com/mirth/connect/connectors/**'
        exclude 'com/mirth/connect/plugins/**'
    }
    manifest { /* Add manifest details if needed */ }
}

// --- Registering Artifacts for Consumption ---
artifacts {
    // Map the configurations to the tasks that produce the JARs
    clientCoreElements clientCoreJar
    cryptoElements cryptoJar
    dbconfElements dbconfJar
    // The main JAR is published via the standard 'apiElements' and 'runtimeElements'
    // The sources JAR can be added if needed, e.g., using 'java-library' plugin's features
}


// --- Resource Processing ---
tasks.named('processResources', ProcessResources) {
    // Generate version.properties
    filesMatching('**/version.properties') { // Filter existing template or create new
        expand(version: project.version, buildDate: new Date().format('MMMM d, yyyy'))
    }
    // Filter mirth-client.jnlp (if needed)
    // filesMatching('**/mirth-client.jnlp') { expand(...) }
}

// --- Build Lifecycle ---
// Ensure custom JAR tasks run during build
tasks.named('assemble') {
    dependsOn clientCoreJar, cryptoJar, dbconfJar, userutilSourcesJar // Add other custom JARs
}